from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework import generics
from .models import Category,SubCategory,Countries,States,Cities,Brand,Product,taxes,Discount,Stores,News,Net_Weight,Flavours,NewsCategory,NewsSubCategory,User
from .serializer import Serializer_Category,Serializer_SubCategory,Serializer_Country,Serializer_States,Serializer_Cities,Serializer_Product,Serializer_Brand,Serializer_tax,Serializer_Discount
from django.shortcuts import get_object_or_404
from rest_framework.parsers import MultiPartParser,FormParser
from django_filters.rest_framework import DjangoFilterBackend
import pandas as pd
import uuid
from .serializer import UserSerializer,RegisterSerializer,Serializer_Store,Serializer_News,Serializer_Net_Weight,Serializer_Flavour,GiftVoucherSerializer,ClaimedGiftVoucherSerializer
from rest_framework import generics, permissions
from rest_framework.response import Response
from .serializer import UserSerializer,  RegisterSerializer,ChangePasswordSerializer,PasswordReseetSerializer,Serializer_News,Serializer_NewsSubCategory,Serializer_NewsCategory,LoginSerializer
from django_filters import FilterSet, NumberFilter
from .Coupoun import Coupon,ClaimedCoupon
from knox.views import LoginView as KnoxLoginView
from .tokens import create_jwt_pair_for_user
from django.conf import settings
from django.contrib.auth.decorators import user_passes_test
from django.utils.decorators import method_decorator
from rest_framework.decorators import action

from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import filters, status

from .Coupoun import Coupon,ClaimedCoupon
from .serializer import CouponSerializer,ClaimedCouponSerializer,ClaimGiftVoucher,GiftVoucher
from Ecommerce.settings import EMAIL_HOST,EMAIL_HOST_USER,EMAIL_HOST_PASSWORD,EMAIL_PORT
import smtplib
import random



# Class based view to Get User Details using Token Authentication
def send_OneToOneMail(from_email='',to_emails=''):
    Otp=random.randint(1000, 9999)
    server=smtplib.SMTP(EMAIL_HOST,EMAIL_PORT)
    server.ehlo()
    server.starttls()
    server.login(EMAIL_HOST_USER,EMAIL_HOST_PASSWORD)
    Subject="Selnox"
    Text="Your One Time Password is "  + str(Otp)
    
    msg='Subject: {}\n\n{}'.format(Subject, Text)
    server.sendmail(from_email,to_emails,msg)
    user=User.objects.get(email=to_emails)
    user.otp=Otp
    user.save()
    server.quit()
    
# from django.contrib.auth import authenticate
    
    
class VerifyOtpLogin(APIView):
    permission_classes=(permissions.AllowAny,)
    def post(self,request):
        try:
            data=request.data

            email=request.data.get("email")
            
            otp=request.data.get("OTP")
            
            
            user= User.objects.filter(email=email).first()
            if user.otp != int(otp):
                return Response({
                    'message':'Something goes wrong',
                    'data':'invalid Otp'
                },status=status.HTTP_400_BAD_REQUEST)
            user= User.objects.get(email=email)  
            if user is not None:

                tokens = create_jwt_pair_for_user(user)

                response = {"message": "Login Successfull", "tokens": tokens}
                return Response(data=response, status=status.HTTP_200_OK)

            else:
                return Response(data={"message": "Invalid email or password"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        
    def get(self, request):
        try:
            content = {"user": str(request.user), "auth": str(request.auth)}

            return Response(data=content, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
            
        
        
class ResetPasswordAPI(APIView):
    serializer_class = ChangePasswordSerializer
    model = User

    def get_object(self, queryset=None):
        try:
            obj = self.request.user
            return obj
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    

    def post(self, request, *args, **kwargs):
        try:
            self.object = self.get_object()
            serializer = ChangePasswordSerializer(data=request.data)
            if serializer.is_valid():
                email=serializer.validated_data['email']
                send_OneToOneMail(from_email='smtpselnox@gmail.com',to_emails=email)
                response = {
                    'status': 'success',
                    'code': status.HTTP_200_OK,
                    'message': 'mail sent successfully',
                    'data': {"Otp_Sent_To":email}
                }

                return Response(response)
            else:
                return Response({"message":"Something Goes Wrong"},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
                
        
        
class VerifyOtpResetPassword(APIView):
    def get_object(self, queryset=None):
        
        obj = self.request.user
        return obj


    def post(self,request):
        try:
            self.object = self.get_object()
            data=request.data
            serializer=PasswordReseetSerializer(data=data)
            if serializer.is_valid():
                email=serializer.validated_data['email']
                new_password=serializer.validated_data['new_password']
                otp=serializer.validated_data['OTP']
            
                user=User.objects.filter(email=email)
                if not user.exists():
                    return Response({
                        'message':'Something goes wrong',
                        'data':'invalid Email'
                    },status=status.HTTP_400_BAD_REQUEST)
                if user[0].otp != otp:
                    return Response({
                        'message':'Something goes wrong',
                        'data':'invalid Otp'
                    },status=status.HTTP_400_BAD_REQUEST)
                if len(new_password)>5 :
                    self.object.set_password(serializer.data.get("new_password"))
                    self.object.save()

                    return Response({
                            'message':'Password is Update',
                        },status=status.HTTP_200_OK)
                else:
                    return Response({
                                'message':'Password must be Strong',
                            },status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        


class LoginAPI(KnoxLoginView):
    permission_classes=(permissions.AllowAny,)
    def post(self,request,format=None):
        try:
            username=request.data.get("username")
            email=request.data.get("email")
            password=request.data.get("password")
            if username:
                if email:
                    if password:
                        serializer=LoginSerializer(data=request.data)
                        if serializer.is_valid():
                            # self.object.check_password(Admin.data.get("password"))
                            
                            email=serializer.validated_data['email']
                            send_OneToOneMail(from_email='smtpselnox@gmail.com',to_emails=email)
                            return Response({
                                        'message':'Email sent',
                                        'data':{"Otp_Sent_to":email}
                                    },status=status.HTTP_200_OK)
                        else:
                            return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"error":"Enter the valid Password"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"error":"Enter the valid Email"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"error":"Enter the valid Username"},status=status.HTTP_400_BAD_REQUEST)
                        
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




# Get User API
class UserAPI(generics.RetrieveAPIView):
    permission_classes = [permissions.IsAuthenticated,]
    serializer_class = UserSerializer

    def get_object(self):
        try:
            return self.request.user
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
#Class based view to register user

#Class based view to register user
class RegisterAPI(generics.GenericAPIView):
    serializer_class =RegisterSerializer

    def post(self,request,*args,**kwargs):
        try:
            serializer=self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            user=serializer.save()
            
        
            return Response({
            "user":UserSerializer(user,context=self.get_serializer_context()).data,
            # "token":AuthToken.objects.create(user)[1]
            })
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        



#Category Api
class GetCategories(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Category.objects.select_related().all()
            serialize = Serializer_Category(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
class AddCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    serializer = Serializer_Category(data=request.data)
                    if serializer.is_valid():
                        serializer.save()
                        return Response({"status": "success","data": serializer.data},status=status.HTTP_200_OK)
                    else:
                        return Response({ "error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "name": "Enter atleast 3 Alphabet"},status=status.HTTP_400_BAD_REQUEST)
                    
            else:
                return Response({ "name": "Enter the valid Name"},status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class UpdateCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    User = Category.objects.get(id=id)
                    serializer = Serializer_Category(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status.HTTP_200_OK)
                    else:
                        return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "name": "Enter atleast 3 Alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"name":"Enter the valid name" },status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    

class DeleteCategory(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Category, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
 
 
#Sub Category Api
class GetSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = SubCategory.objects.select_related().all()
            serialize = Serializer_SubCategory(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)


class AddSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    serializer = Serializer_SubCategory(data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save()
                        return Response({"status": "success","data": serializer.data}, status.HTTP_200_OK)
                    else:
                        return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "name": "Enter atleast 3 Alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else :
                return Response({"name":"Enter the valid SubCategory Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    User = SubCategory.objects.get(id=id)
                    serializer = Serializer_SubCategory(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                    else:
                        return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "name": "Enter atleast 3 Alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"name":"Enter the valid Subcategory Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class DeleteSubCategory(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id=None):
        try:
            User = get_object_or_404(SubCategory, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)



#Country
class GetCountry(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Countries.objects.select_related().all()
            serialize = Serializer_Country(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
class AddCountry(APIView):
 #   permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            Country=request.data.get("CountryName")
            if Country:
                if len(Country)>=3:
                    serializer = Serializer_Country(data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save()
                        return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                    else:
                        return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Country": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
            return Response({"Country": "Enter the valid Country"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateCountry(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            Country=request.data.get("CountryName")
            if Country:
                if len(Country)>=3:
                    User = Countries.objects.get(id=id)
                    serializer = Serializer_Country(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                    else:
                        return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Country": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Country": "Enter the valid Country"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class DeleteCountry(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Countries, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
#States
class GetStates(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = States.objects.select_related().all()
            serialize = Serializer_States(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    

    
class AddStates(APIView):
  #  permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            StateName=request.data.get("StateName")
            if StateName:
                if len(StateName)>=3:
                    serializer = Serializer_States(data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save()
                        return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                    else:
                        return Response({"status": "error", "data": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "StateName": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"StateName":"Enter the valid State Name"},status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateStates(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            StateName=request.data.get("StateName")
            if StateName:
                if len(StateName)>=3:
                    User = States.objects.get(id=id)
                    serializer = Serializer_States(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                    else:
                        return Response({"status": "error", "data": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "StateName": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"StateName":"Enter the valid State Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class DeleteStates(APIView):
    permission_classes = [IsAuthenticated]
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(States, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
#Cities 
class GetCities(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Cities.objects.select_related().all()
            serialize = Serializer_Cities(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
class AddCities(APIView):
   # permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            CityName=request.data.get("CityName")
            if CityName:
                if len(CityName)>=3:
                    serializer = Serializer_Cities(data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save()
                        return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                    else:
                        return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "CityName": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"CityName": "Enter the valid City Name"},status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateCities(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            CityName=request.data.get("CityName")
            if CityName:
                if len(CityName)>=3:
                    User = Cities.objects.get(id=id)
                    serializer = Serializer_Cities(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                    else:
                        return Response({ "error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "CityName": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                    return Response({ "CityName": "Enter the valid City Name"},status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteCities(APIView):
    permission_classes = [IsAuthenticated]
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Cities, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
#Product
class GetProduct(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Product.objects.select_related().all()
            serialize = Serializer_Product(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)



class AddProduct(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            Product_Name=request.data.get("Product_Name")
            Product_Description=request.data.get("Product_Description")
            quantity=request.data.get("quantity")
            Description=request.data.get("Description")
            prices=request.data.get("prices")
            if Product_Name:
                if Product_Description:
                    if quantity:
                        if prices:
                            if len(Product_Name)>=3:
                                serializer = Serializer_Product(data=request.data, partial=True)
                                if serializer.is_valid():
                                    serializer.save()
                                    return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                                else:
                                    return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                            else:
                                return Response({ "Product_Name": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                        else:
                            return Response({"prices":"Enter the Valid Price"},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"quantity": "Enter the valid Quantity"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Product_Description": "Enter the Product Description"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Product_Name": "Enter the valid Product Name"},status=status.HTTP_400_BAD_REQUEST)            
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

class UpdateProduct(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            Product_Name=request.data.get("Product_Name")
            Product_Description=request.data.get("Product_Description")
            quantity=request.data.get("quantity")
            Description=request.data.get("Description")
            prices=request.data.get("prices")
            if Product_Name:
                if Product_Description:
                    if quantity:
                        if prices:
                            if len(Product_Name)>=3:
                                User = Product.objects.get(id=id)
                                serializer = Serializer_Product(User, data=request.data, partial=True)
                                if serializer.is_valid():
                                    serializer.save(modified_by=request.user.username)
                                    return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                                else:
                                    return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                            else:
                                return Response({ "Product_Name": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                        else:
                            return Response({"prices":"Enter the Valid Price"},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"quantity": "Enter the valid Quantity"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Product_Details": "Enter the Product Descrption"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Product_Name": "Enter the valid Product Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteProduct(APIView):
    permission_classes = [IsAuthenticated]
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Product, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
        
#Brand
class GetBrand(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Brand.objects.select_related().all()
            serialize = Serializer_Brand(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
class AddBrand(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            name=request.data.get("name")
            Brand_description=request.data.get("Brand_description")
            if name:
                if Brand_description:
                    if len(name)>=3:
                        serializer = Serializer_Brand(data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save()
                            return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                        else:
                            return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "name": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Brand_description":"Enter the Brand Description"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"name": "Enter the valid Name"},status=status.HTTP_400_BAD_REQUEST)
                        
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateBrand(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            name=request.data.get("name")
            Brand_description=request.data.get("Brand_description")
            Brand_Logo=request.data.get("Brand_Logo")
            if name:
                if Brand_description:
                    if len(name)>=3:
                        User = Brand.objects.get(id=id)
                        serializer = Serializer_Brand(User, data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save(modified_by=request.user.username)
                            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                        else:
                            return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "name": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Brand_description":"Enter the Brand Description"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"name": "Enter the valid Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteBrand(APIView): 
    permission_classes = [IsAuthenticated]
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Brand, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        

#tax
class GetTax(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = taxes.objects.select_related().all()
            serialize = Serializer_tax(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
class AddTax(APIView): 
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            tax_value=request.data.get("tax_value")
            tax_type=request.data.get("tax_type")
            if tax_value:
                if tax_type:
                    if len(tax_type)>=3:
                        serializer = Serializer_tax(data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save()
                            return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                        else:
                            return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "tax_type": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"tax_type":"Enter the Type of Tax"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"tax_value":"Enter the Tax Value"},status=status.HTTP_400_BAD_REQUEST)
                
                    
                    
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateTax(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            tax_value=request.data.get("tax_value")
            tax_type=request.data.get("tax_type")
            if tax_value:
                if tax_type:
                    if len(tax_type)>=3:
                        User = taxes.objects.get(id=id)
                        serializer = Serializer_tax(User, data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save(modified_by=request.user.username)
                            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                        else:
                            return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "tax_type": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"tax_type":"Enter the Type of Tax"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"tax_value":"Enter the Tax Value"},status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteTax(APIView): 
    permission_classes = [IsAuthenticated]
    
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(taxes, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    



#Discount
class GetDiscount(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Discount.objects.select_related().all()
            serialize = Serializer_Discount(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
        
        
class AddDiscount(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            Discount_value=request.data.get("Discount_value")
            Discount_type=request.data.get("Discount_type")
            if Discount_value:
                if Discount_type:
                    if len(Discount_type)>=3:
                        serializer = Serializer_Discount(data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save()
                            return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                        else:
                            return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "Discount_type": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Discount_type":"Enter the valid Discount Type"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Discount_value":"Enter the Discount Value"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateDiscount(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            Discount_value=request.data.get("Discount_value")
            Discount_type=request.data.get("Discount_type")
            if Discount_value:
                if Discount_type:
                    if len(Discount_type)>=3:
                        User = Discount.objects.get(id=id)
                        serializer = Serializer_Discount(User, data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save(modified_by=request.user.username)
                            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                        else:
                            return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "Discount_type": "Enter atleast 3 Alhabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Discount_type":"Enter the valid Discount Type"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Discount_value":"Enter the Discount Value"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteDiscount(APIView): 
    permission_classes = [IsAuthenticated]
    
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Discount, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)


     
#Replicate or Duplicate Data
#Replicate or Duplicate Data
class Replicate_data(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request, id=None):
        try:
            User = Product.objects.get(id=id)
            serializer = Serializer_Product(User, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
            else:
                return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)          
        

#Stores 
class GetStores(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Stores.objects.select_related().all()
            serialize = Serializer_Store(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
class AddStores(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request):
        try:
            Store_Name=request.data.get("Store_Name")
            Store_Address=request.data.get("Store_Address")
            Stores_MobileNo=request.data.get("Stores_MobileNo")
            LicenceNo=request.data.get("LicenceNo")
            if Store_Name:
                if Store_Address:
                    if Stores_MobileNo and len(Stores_MobileNo)<=15 and len(Stores_MobileNo)>=10:
                        if LicenceNo:
                            if len(Store_Name)>=3:
                                serializer = Serializer_Store(data=request.data, partial=True)
                                if serializer.is_valid():
                                    serializer.save()
                                    return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                                else:
                                    return Response({"error": serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                            else:
                                return Response({"Store_Name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                        else:
                            return Response({"LicenceNo": "Enter the Valid License Number"},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"Stores_MobileNo": "Enter the valid Mobile number"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Store_Address":"Enter the store Address"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Store_Name": "Enter the Store Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class UpdateStores(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            Store_Name=request.data.get("Store_Name")
            Store_Address=request.data.get("Store_Address")
            Store_Image=request.data.get("Store_Image")
            Stores_MobileNo=request.data.get("Stores_MobileNo")
            LicenceNo=request.data.get("LicenceNo")
            if Store_Name:
                if Store_Address:
                        if Stores_MobileNo and len(Stores_MobileNo)>=10 and len(Stores_MobileNo)<=15:
                            if LicenceNo:
                                if len(Store_Name)>=3:
                                    User = Stores.objects.get(id=id)
                                    serializer = Serializer_Store(User, data=request.data, partial=True)
                                    if serializer.is_valid():
                                        serializer.save(modified_by=request.user.username)
                                        return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                                    else:
                                        return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                                else:
                                    return Response({"Store_Name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                            else:
                                return Response({"LicenceNo": "Enter the Valid License Number"},status=status.HTTP_400_BAD_REQUEST)
                        else:
                            return Response({"Stores_MobileNo": "Enter the valid Mobile number"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"Store_Address":"Enter the store Address"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"Store_Name": "Enter the Store Name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteStores(APIView): 
    permission_classes = [IsAuthenticated]
    
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Stores, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)





#News
class GetNews(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = News.objects.select_related().all()
            serialize = Serializer_News(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
class AddNews(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            Title=request.data.get("Title")
            Description=request.data.get("Description")
            Image=request.data.get("Image")
            Meta_title=request.data.get("Meta_title")
            Meta_Description=request.data.get("Meta_Description")
            Url_slug=request.data.get("Url_slug")
            Alt_Text=request.data.get("Alt_Text")
            if Title:
                if Description:
                    if Image:
                        if Meta_title and len(Meta_title)<=60 and len(Meta_title)>=10:
                            if Meta_Description:
                                if Url_slug :
                                    if Alt_Text:
                                        if len(Title)>=3:
                                            serializer = Serializer_News(data=request.data, partial=True)
                                            if serializer.is_valid():
                                                serializer.save()
                                                return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                                            else:
                                                return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                                        else:
                                            return Response({"Title": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                                    else:
                                        return Response({ "Alt_Text":"Enter The Alt_Text"},status=status.HTTP_400_BAD_REQUEST)

                                else:
                                    return Response({ "Url_slug":"Enter the Valid Url"},status=status.HTTP_400_BAD_REQUEST)
                            else:
                                return Response({ "Meta_Description":"Enter Meta Description"},status=status.HTTP_400_BAD_REQUEST)
                        else:
                            return Response({ "Meta_title":"Enter Meta Title atleast more then 10 Alphabets"},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "Image":"Enter Image"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Description":"Enter Description"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "Title":"Enter the Valid Title"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateNews(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            Title=request.data.get("Title")
            Description=request.data.get("Description")
            Image=request.data.get("Image")
            Meta_title=request.data.get("Meta_title")
            Meta_Description=request.data.get("Meta_Description")
            Url_slug=request.data.get("Url_slug")
            if Title:
                if Description:
                    if Meta_title and len(Meta_title)<=60 and len(Meta_title)>=10:
                        if Meta_Description:
                            if Url_slug:
                                if len(Title)>=3:
                                    User = News.objects.get(id=id)
                                    serializer = Serializer_News(User, data=request.data, partial=True)
                                    if serializer.is_valid():
                                        serializer.save(modified_by=request.user.username)
                                        return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                                    else:
                                        return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                                else:
                                    return Response({"Title": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                            else:
                                return Response({ "Url_slug":"Enter the Valid Url "},status=status.HTTP_400_BAD_REQUEST)
                        else:
                            return Response({ "Meta_Description":"Enter Meta Description"},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({ "Meta_title":"Enter Meta Title atleast more then 10 Alphabets"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Description":"Enter Description"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "Title":"Enter the Valid Title"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)



class DeleteNews(APIView): 
    permission_classes = [IsAuthenticated]
    
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(News, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)    
    
    
#NET Weight 
class GetNet_Weight(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Net_Weight.objects.select_related().all()
            serialize = Serializer_Net_Weight(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
class AddNet_Weight(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            Weight_type=request.data.get("Weight_type")
            Weight_Price=request.data.get("Weight_Price")
            if Weight_type:
                if Weight_Price:
                    if len(Weight_type)>=3:
                        serializer = Serializer_Net_Weight(data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save()
                            return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                        else:
                            return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"Weight_type": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Weight_Price":"Enter the valid Price"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "Weight_type":"Enter the Weight Type"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateNet_Weight(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            Weight_type=request.data.get("Weight_type")
            Weight_Price=request.data.get("Weight_Price")
            if Weight_type:
                if Weight_Price:
                    if len(Weight_type)>=3:
                        User = Net_Weight.objects.get(id=id)
                        serializer = Serializer_Net_Weight(User, data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save(modified_by=request.user.username)
                            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                        else:
                            return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"Weight_type": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Weight_Price":"Enter the valid Price"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "Weight_type":"Enter the Weight Type"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class DeleteNet_Weight(APIView): 
    permission_classes = [IsAuthenticated]
    
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Net_Weight, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)


#Flavours 
class GetFlavours(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = Flavours.objects.select_related().all()
            serialize = Serializer_Flavour(User, many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
class AddFlavours(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            flavour_Name=request.data.get("flavour_Name")
            Price=request.data.get("Price")
            FlavoursImage=request.data.get("FlavoursImage")
            if flavour_Name:
                if Price:
                    if len(flavour_Name)>=3:
                        serializer = Serializer_Flavour(data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save()
                            return Response({"status": "success","data": serializer.data}, status=status.HTTP_201_CREATED)
                        else:
                            return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"flavour_Name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Price":"Enter the Price"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "flavour_Name":"Enter the Flavour name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateFlavours(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            flavour_Name=request.data.get("flavour_Name")
            Price=request.data.get("Price")
            FlavoursImage=request.data.get("FlavoursImage")
            if flavour_Name:
                if Price:
                    if len(flavour_Name)>=3:
                        User = Flavours.objects.get(id=id)
                        serializer = Serializer_Flavour(User, data=request.data, partial=True)
                        if serializer.is_valid():
                            serializer.save(modified_by=request.user.username)
                            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
                        else:
                            return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                    else:
                        return Response({"flavour_Name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({ "Price":"Enter the Price"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "flavour_Name":"Enter the Flavour name"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteFlavours(APIView): 
    permission_classes = [IsAuthenticated]
    
    def delete(self, request, id=None):
        try:
            User = get_object_or_404(Flavours, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)




# Api_key='rur5zqul21px64yq18i9l1h7hqdki9nwbr488hqd1qshevo3'

#################################################################################################################################################################################
################################################################TESTING##########################################################################################################
#################################################################################################################################################################################
#Coupon
from django_filters import FilterSet, NumberFilter
from django.apps import apps
from .Coupoun import Coupon,ClaimedCoupon


class CouponFilter(FilterSet):
    min_value = NumberFilter(name='value', lookup_expr='gte')
    max_value = NumberFilter(name='value', lookup_expr='lte')

    class Meta:
        model = Coupon
        fields = ['bound', 'type', 'min_value', 'max_value']
        
from django.conf import settings
from django.contrib.auth.decorators import user_passes_test
from django.utils.decorators import method_decorator
from rest_framework.decorators import action

from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import filters, status, viewsets

from .views import CouponFilter
from .Coupoun import Coupon,ClaimedCoupon
from .serializer import CouponSerializer,ClaimedCouponSerializer,ClaimGiftVoucher,GiftVoucher



def group_required(api_command):
    try:
        def in_groups(u):
            try:
                if u.is_authenticated():
                    if u.is_superuser:
                        return True

                    if settings.COUPON_PERMISSIONS and api_command in settings.COUPON_PERMISSIONS:
                        group_names = settings.COUPON_PERMISSIONS[api_command]

                        if len(group_names) == 0:
                            return True

                        if bool(u.groups.filter(name__in=group_names)):
                            return True
                return False
            except Exception as e:
                return Response({'error' : str(e)},status=500)
        return user_passes_test(in_groups)
    except Exception as e:
            return Response({'error' : str(e)},status=500)


def get_redeemed_queryset(coupons_id=None):
    try:
        # api_command = 'REDEEMED'

        if coupons_id is None:
            qs_all = ClaimedCoupon.objects.all()
            # serialize=ClaimedCouponSerializer(qs_all,many=True)
            # qs_some = ClaimedCoupon.objects.filter(user=user.id)
        else:
            qs_all = ClaimedCoupon.objects.filter(id=coupons_id)
            # qs_some = ClaimedCoupon.objects.filter(coupon=coupon_id, user=user.id)

        # if user.is_superuser:
        #     return qs_all                             self.request,

        # if settings.COUPON_PERMISSIONS and api_command in settings.COUPON_PERMISSIONS:
        #     group_names = settings.COUPON_PERMISSIONS[api_command]

            # if len(group_names) == 0:
            #     return qs_some

            # if bool(user.groups.filter(name__in=group_names)):
            #     return Response(serialize.data)
        return qs_all

        # return qs_some
    except Exception as e:
            return Response({'error' : str(e)},status=500)


class DeleteCoupoun(APIView):
    permission_classes=[IsAuthenticated]
    def delete(self, request, id=None, **kwargs):
        try:
            coupon = get_object_or_404(Coupon, id=id)
            coupon.delete()

            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class CouponViewSet(APIView):
    permission_classes = [IsAuthenticated]

    filter_backends = (filters.SearchFilter, DjangoFilterBackend)
    filter_class = CouponFilter
    search_fields = ('code', 'code_l')
    serializer_class = CouponSerializer

    def get(self,request):
        try:

            api_command = 'LIST'
            qs_all = Coupon.objects.all()
            #qs_some = Coupon.objects.filter(bound=True)#, user=self.request.user.id)
            serialize=CouponSerializer(qs_all,many=True)
            #if self.request.user.is_superuser:
            #    return Response(serialize.data)

            #if settings.COUPON_PERMISSIONS and api_command in settings.COUPON_PERMISSIONS:
             #   group_names = settings.COUPON_PERMISSIONS[api_command]

              #  if len(group_names) == 0:
               #     return qs_some

                #if bool(self.request.user.groups.filter(name__in=group_names)):
                 #   return qs_all

            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @method_decorator(group_required('CREATE'))
    def post(self, request, **kwargs):
        try:
            serializer = CouponSerializer(data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

#    @method_decorator(group_required('DELETE'))
 #   def delete(self, request, pk=None, **kwargs):
  #      try:
   #         coupon = get_object_or_404(Coupon.objects.all(), pk=pk)
    #        coupon.delete()

     #       return Response(status=status.HTTP_204_NO_CONTENT)
      #  except Exception as e:
       #     return Response({'error' : str(e)},status=500)

    def partial_update(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def retrieve(self, request, pk=None, **kwargs):
        try:
            value_is_int = False

            try:
                pk = int(pk)
                value_is_int = True
            except ValueError:
                pass

            if value_is_int:
                coupon = get_object_or_404(Coupon.objects.all(), pk=pk)
            else:
                coupon = get_object_or_404(Coupon.objects.all(), code_l=pk.lower())

            serializer = CouponSerializer(coupon, context={'request': request})

            return Response(serializer.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @method_decorator(group_required('UPDATE'))
    def patch(self, request, pk=None, **kwargs):
        try:
            coupon = get_object_or_404(Coupon.objects.all(), pk=pk)

            serializer = CouponSerializer(coupon, data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_202_ACCEPTED)

            return Response(serializer.errors, status=200)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @action(detail=False,methods=['get'])
    def redeem(self, request, pk=None, **kwargs):
        try:

            coupon = get_object_or_404(Coupon.objects.all(), pk=pk)
            qs = get_redeemed_queryset(self.request.user, coupon.id)

            serializer = ClaimedCouponSerializer(qs, many=True, context={'request': request})

            return Response(serializer.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @action(detail=False,methods=['put'])
    def put(self, request, pk=None, **kwargs):
        try:

            queryset = Coupon.objects.all()
            coupon = get_object_or_404(queryset, pk=pk)
            data = {
                'coupon': pk,
                'user':   self.request.user.id,
            }

            serializer = ClaimedCouponSerializer(data=data, context={'request': request})
            if serializer.is_valid():
                serializer.save()

                return Response(serializer.data, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)


class ClaimedCouponViewSet(APIView):
    permission_classes = [IsAuthenticated]
    filter_backends = (DjangoFilterBackend,)
    # filter_fields = ('user',)
    serializer_class = ClaimedCouponSerializer

    def get(self,request,id=None):
        try:
            # coupons_id=request.data.get(id)
            if id is None:
                qs_all = ClaimedCoupon.objects.all()
            
            else:
                qs_all = ClaimedCoupon.objects.filter(id=id)
            serializer=ClaimedCouponSerializer(qs_all,many=True)
            
            return Response(serializer.data)#.user
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def post(self, request, **kwargs):
        try:
            serializer = ClaimedCouponSerializer(data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    @method_decorator(group_required('DELETE'))
    def delete(self, request, pk=None, **kwargs):
        try:

            redeemed = get_object_or_404(ClaimedCoupon.objects.all(), pk=pk)
            redeemed.delete()

            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def partial_update(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def retrieve(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def patch(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

class ReedemCoupoun(APIView):
        @action(detail=False,methods=['get'])
        def get(self, request, id=None, **kwargs):
            try:

                coupon = get_object_or_404(Coupon.objects.all(), pk=id)
                qs = get_redeemed_queryset( coupons_id=coupon.id)

                serializer = ClaimedCouponSerializer(qs, many=True, context={'request': request})

                return Response(serializer.data)
            except Exception as e:
                return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class GiftVoucherFilter(FilterSet):
    min_value = NumberFilter(name='value', lookup_expr='gte')
    max_value = NumberFilter(name='value', lookup_expr='lte')

    class Meta:
         model = GiftVoucher
        fields = '__all__'


def group_required1(api_command):
    try:
        def in_groups(u):
            try:
                if u.is_authenticated():
                    if u.is_superuser:
                        return True

                    if settings.GiftVoucher_PERMISSIONS and api_command in settings.GiftVoucher_PERMISSIONS:
                        group_names = settings.GiftVoucher_PERMISSIONS[api_command]

                        if len(group_names) == 0:
                            return True

                        if bool(u.groups.filter(name__in=group_names)):
                            return True
                return False
            except Exception as e:
                return Response({'error' : str(e)},status=500)
        return user_passes_test(in_groups)
    except Exception as e:
            return Response({'error' : str(e)},status=500)


def get_redeemed_queryset1(user, GiftVoucher_id=None):
    try:
        if GiftVoucher_id is None:
            qs_all = ClaimGiftVoucher.objects.all()
        else:
            qs_all = ClaimGiftVoucher.objects.filter(id=GiftVoucher_id)

        return qs_all
    except Exception as e:
            return Response({'error' : str(e)},status=500)


class DeleteGiftVoucher(APIView):
    permission_classes=[IsAuthenticated]
    def delete(self, request, id=None, **kwargs):
        try:
            coupon = get_object_or_404(GiftVoucher, id=id)
            coupon.delete()

            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class GiftVoucherViewSet(APIView):
    
    permission_classes = [IsAuthenticated]

    filter_backends = (filters.SearchFilter, DjangoFilterBackend)
    filter_class = GiftVoucherFilter
    search_fields = ('code')
    serializer_class = GiftVoucherSerializer

    def get(self,request):
        try:

            qs_all = GiftVoucher.objects.all()
            serialize=GiftVoucherSerializer(qs_all,many=True)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @method_decorator(group_required1('CREATE'))
    def post(self, request, **kwargs):
        try:
            serializer = GiftVoucherSerializer(data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @method_decorator(group_required1('DELETE'))
    def delete(self, request, pk=None, **kwargs):
        try:
            GiftVoucher = get_object_or_404(GiftVoucher.objects.all(), pk=pk)
            GiftVoucher.delete()

            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def partial_update(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def retrieve(self, request, pk=None, **kwargs):
        try:
            value_is_int = False

            try:
                pk = int(pk)
                value_is_int = True
            except ValueError:
                pass

            if value_is_int:
                GiftVoucher = get_object_or_404(GiftVoucher.objects.all(), pk=pk)
            else:
                GiftVoucher = get_object_or_404(GiftVoucher.objects.all(), code_l=pk.lower())

            serializer = GiftVoucherSerializer(GiftVoucher, context={'request': request})

            return Response(serializer.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @method_decorator(group_required1('UPDATE'))
    def patch(self, request, pk=None, **kwargs):
        try:
            GiftVoucher = get_object_or_404(GiftVoucher.objects.all(), pk=pk)

            serializer = GiftVoucherSerializer(GiftVoucher, data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_202_ACCEPTED)

            return Response(serializer.errors, status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @action(detail=False,methods=['get'])
    def redeem(self, request, pk=None, **kwargs):
        try:

            GiftVoucher = get_object_or_404(GiftVoucher.objects.all(), pk=pk)
            qs = get_redeemed_queryset1(self.request.user, GiftVoucher.id)

            serializer = ClaimGiftVoucher(qs, many=True, context={'request': request})

            return Response(serializer.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    @action(detail=False,methods=['put'])
    def put(self, request, pk=None, **kwargs):
        try:

            queryset = GiftVoucher.objects.all()
            GiftVoucher = get_object_or_404(queryset, pk=pk)
            data = {
                'GiftVoucher': pk,
                'user':   self.request.user.id,
            }

            serializer = ClaimedGiftVoucherSerializer(data=data, context={'request': request})
            if serializer.is_valid():
                serializer.save()

                return Response(serializer.data, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)


class ClaimGiftVoucherViewSet(APIView):
    permission_classes = [IsAuthenticated]
    filter_backends = (DjangoFilterBackend,)
    filter_fields = ('user',)
    serializer_class = ClaimedGiftVoucherSerializer

    def get(self,request,id=None):
        try:
            if id is None:
                qs_all = ClaimGiftVoucher.objects.all()
            else:
                qs_all = ClaimGiftVoucher.objects.filter(id=id)
            serializer=ClaimedGiftVoucherSerializer(qs_all,many=True)

            return Response(serializer.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)


    @method_decorator(group_required1('CREATE'))
    def post(self, request, **kwargs):
        try:
            serializer = ClaimedGiftVoucherSerializer(data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    @method_decorator(group_required1('DELETE'))
    def delete(self, request, pk=None, **kwargs):
        try:

            redeemed = get_object_or_404(ClaimGiftVoucher.objects.all(), pk=pk)
            redeemed.delete()      

            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def partial_update(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def retrieve(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)

    def update(self, request, pk=None, **kwargs):
        try:
            return Response(status=400)
        except Exception as e:
            return Response({'error' : str(e)},status=500)



class ReedemVoucher(APIView):
        @action(detail=False,methods=['get'])
        def get(self, request, id=None, **kwargs):
            try:

                coupon = get_object_or_404(GiftVoucher.objects.all(), pk=id)
                qs = get_redeemed_queryset1( GiftVoucher_id=coupon.id)

                serializer = ClaimedGiftVoucherSerializer(qs, many=True, context={'request': request})

                return Response(serializer.data)
            except Exception as e:
                return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)






import pandas as pd
import uuid

class ExportImportExcel(APIView):
    permission_classes = [IsAuthenticated]
    
    def get(self,request):
        try:
            User = Product.objects.all()
            serialize = Serializer_Product(User, many=True)
            df=pd.DataFrame(serialize.data)
            df.to_csv(f'/home/selnoxinfotech/Ecommerce/media/excel{uuid.uuid4()}.csv',encoding="UTF-8",index=False)
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
    
    
####################################################################################################################################
###################Count############################################################################################################
####################################################################################################################################

class GetCountCategories(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            count=Category.objects.all().count()
            return Response(count)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        


class GetCountSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            count=SubCategory.objects.all().count()
            return Response(count)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        

class GetCountProduct(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            count=Product.objects.all().count()
            return Response(count)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
class GetCountBrand(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            count=Brand.objects.all().count()
            return Response(count)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
class GetCountStore(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            count=Stores.objects.all().count()
            return Response(count)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
class GetCountNews(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            count=News.objects.all().count()
            return Response(count)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    

class TotalCount(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request,format=None):
        try:
            category=Category.objects.all().count()
            subCategory=SubCategory.objects.all().count()
            product=Product.objects.all().count()
            brand=Brand.objects.all().count()
            store=Stores.objects.all().count()
            news=News.objects.all().count()
            return Response({'Data':[{"title":"Total Category","total":category},
                                    {"title":"Total Product","total":product},
                                    {"title":"Total subCategory","total":subCategory},
                                    {"title":"Total brand","total":brand},
                                    {"title":"Total store","total":store},
                                    {"title":"Total News","total":news}]})
        except Exception as e:
            return Response({'error' : str(e)},status=500)    

from django.db.models import Count
class TotalProductGraph(APIView):   
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            TotalProduct=Product.objects.filter(created__range=["2022-01-01", "2050-01-31"])
            if TotalProduct is not None:
                User = Product.objects.all()
                for i in User:
                    CreatedMonths=i.created.strftime('%B')
                    if CreatedMonths=='January':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='February':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='March':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='April':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='May':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='June':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='July':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='August':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='September':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='October':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='November':
                        TotalProductCount=Product.objects.count()
                    elif CreatedMonths=='December':
                        TotalProductCount=Product.objects.count()
                        
            return Response({'data':{"Month":CreatedMonths,"count":TotalProductCount}})
        except Exception as e:
            return Response({'error' : str(e)},status=500)


#Category Api
class GetNewsCategories(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = NewsCategory.objects.select_related().all()
            serialize = Serializer_NewsCategory(User, many=True)
            
            return Response(serialize.data)
        except Exception as e:
            return Response({'error' : str(e)},status=500)
    
    
    
    
class AddNewsCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    serializer = Serializer_NewsCategory(data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save()
                        return Response({"status": "success","data": serializer.data}, status.HTTP_200_OK)
                    else:
                        return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "name":"Enter The valid Name of Category"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class UpdateNewsCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    User = NewsCategory.objects.get(id=id)
                    serializer = Serializer_NewsCategory(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status.HTTP_200_OK)
                    else:
                        return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "name":"Enter The valid Name of Category"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class DeleteNewsCategory(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id=None):
        try:
            User = get_object_or_404(NewsCategory, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
 
 
#Sub Category Api
class GetNewsSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        try:
            User = NewsSubCategory.objects.select_related().all()
            serialize = Serializer_NewsSubCategory(User, many=True)
            return Response({"data":serialize.data},status=200)
        except Exception as e:
            return Response({'error' : str(e)},status=500)



class AddNewsSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    serializer = Serializer_NewsSubCategory(data=request.data, partial=True)
                    if serializer.is_valid(): 
                        serializer.save()
                        return Response({"status": "success","data": serializer.data}, status.HTTP_200_OK)
                    else:
                        return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "name":"Enter The valid Name of Sub-Category"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateNewsSubCategories(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            name=request.data.get("name")
            if name:
                if len(name)>=3:
                    User = NewsSubCategory.objects.get(id=id)
                    serializer = Serializer_NewsSubCategory(User, data=request.data, partial=True)
                    if serializer.is_valid():
                        serializer.save(modified_by=request.user.username)
                        return Response({"status": "success", "data": serializer.data}, status.HTTP_200_OK)
                    else:
                        return Response({ "error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
                else:
                    return Response({"name": "Enter atleast 3 alphabet"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({ "name":"Enter The valid Name of Sub-Category"},status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)




class DeleteNewsSubCategory(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request, id=None):
        try:
            User = get_object_or_404(NewsSubCategory, id=id)
            User.delete()
            return Response({"status": "success", "data": "Deleted"})
        except Exception as e:
            return Response({'error' : str(e)},status=500)
        
 
class FilterbyNewsSubCategory(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, id=None):
        try:
            subcategory=request.data.get(id)
            User = News.objects.filter(SubCategory=subcategory)
            serializer = Serializer_News(User,many=True)
            return Response({"status": "success", "data": serializer.data}, status=200)
        except Exception as e:
            return Response({'error' : str(e)},status=500)



class FilterbyCategory(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request,id=None):
        try:
            User = SubCategory.objects.filter(category_id=id)
            serializer = Serializer_SubCategory(User,many=True)
            
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)



        
        
class FilterStatesByCountry(APIView):
#    permission_classes = [IsAuthenticated]
    def get(self,request,id=None):
        try:
            User = States.objects.filter(CountryName_id=id)
            active=States.objects.filter(status="Active")
            if User and active:
                serializer = Serializer_States(User,many=True)
                return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class FilterCitiesByStates(APIView):
#    permission_classes = [IsAuthenticated]
    def get(self,request,id=None):
        try:
            User = Cities.objects.filter(StateName_id=id)
            active=Cities.objects.filter(status="Active")
            if User and active:
                serializer = Serializer_Cities(User,many=True)
                return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)        
        
        
        
class ActiveCategory(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Category.objects.filter(Status="Active")
            serializer = Serializer_Category(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

            
class ActiveSubCategory(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=SubCategory.objects.filter(Status="Active")
            serializer = Serializer_SubCategory(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class ActiveCountry(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Countries.objects.filter(Status="Active")
            serializer = Serializer_Country(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        
class ActiveStates(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=States.objects.filter(Status="Active")
            serializer = Serializer_States(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
class ActiveCities(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Cities.objects.filter(Status="Active")
            serializer = Serializer_Cities(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ActiveStores(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Stores.objects.filter(Status="Active")
            serializer = Serializer_Store(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
class ActiveBrand(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Brand.objects.filter(Status="Active")
            serializer = Serializer_Brand(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        
class ActiveTax(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=taxes.objects.filter(Status="Active")
            serializer = Serializer_tax(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
class ActiveDiscount(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Discount.objects.filter(Status="Active")
            serializer = Serializer_Discount(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        
class ActiveNetWeight(APIView):
    permission_classes = [IsAuthenticated]
    def get(self,request):
        try:
            User=Net_Weight.objects.filter(Status="Active")
            serializer = Serializer_Net_Weight(User,many=True)
            return Response({"status": "success", "data":serializer.data}, status.HTTP_200_OK)
        except Exception as e:
            return Response({'error' : str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
